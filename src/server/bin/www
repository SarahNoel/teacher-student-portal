#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('_example:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */




function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}

var users = [];
// var rooms = [];
var currentRoom;
//sockets
io.on('connection', function(socket) {
  console.log("connected!");

  socket.on('login', function(room){
    console.log(room);
    // if(rooms.indexOf(room)===-1){
    //   rooms.push(room);
    // }
    // socket.room = room;
    // currentRoom = room;
    // socket.join(room);
  });

  socket.on('entered', function(user){
    if(users.indexOf(user) === -1){
      users.push(user);
    }
    socket.user = user;
    socket.emit('online-users', users);
  });

  socket.on('message-sent', function(message){
    io.emit('message-received', {message:message, user:socket.user});
  });

  socket.on('disconnect', function(username){
    var index = users.indexOf(username);
    users.splice(index, 1);
    io.emit('user left', {user:socket.user, users:users});
  });

});



